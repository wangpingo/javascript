一、大括号的位置
return {
　　　　key : value;
　　};
规则1：表示区块起首的大括号，不要另起一行。
二、 圆括号
圆括号（parentheses）在Javascript中有两种作用，一种表示调用函数，
另一种表示不同的值的组合（grouping）。我们可以用空格，区分这两种不同的括号。
规则2：调用函数的时候，函数名与左括号之间没有空格。
规则3：函数名与参数序列之间，没有空格。
规则4：所有其他语法元素与左括号之间，都有一个空格。
三、分号
分号表示语句的结束。大多数情况下，如果你省略了句尾的分号，Javascript会自动添加。
规则5：不要省略句末的分号。
四、with语句
规则6：不要使用with语句。
五、相等和严格相等
规则7：不要使用"相等"（==）运算符，只使用"严格相等"（===）运算符。
六、语句的合并
规则8：不要将不同目的的语句，合并成一行。
七、变量声明
Javascript会自动将变量声明"提升"（hoist）到代码块（block）的头部。
规则9：所有变量声明都放在函数的头部。
规则10：所有函数都在使用之前定义。
八、全局变量
Javascript最大的语法缺点，可能就是全局变量对于任何一个代码块，都是可
读可写。这对代码的模块化和重复使用，非常不利。
规则11：避免使用全局变量；如果不得不使用，用大写字母表示变量名，比如UPPER_CASE。
九、new命令
Javascript使用new命令，从建构函数生成一个新对象。
规则12：不要使用new命令，改用Object.create()命令。
规则13：建构函数的函数名，采用首字母大写（InitialCap）；其他函数名，一律首字母小写。
十、自增和自减运算符
自增（++）和自减（--）运算符，放在变量的前面或后面，返回的值不一样，很容易发生错误。
事实上，所有的++运算符都可以用"+= 1"代替。
规则14：不要使用自增（++）和自减（--）运算符，用+=和-=代替。
十一、区块
如果循环和判断的代码体只有一行，Javascript允许该区块（block）省略大括号。
规则15：总是使用大括号表示区块。














